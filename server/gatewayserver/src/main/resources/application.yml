server:
  port: 8072

spring:
  application:
    name: gatewayserver
  cloud:
    gateway:
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s
        tcp:
          write-timeout: 5s
          read-timeout: 5s
  redis:
    host: ${SPRING_DATA_REDIS_HOST:localhost}
    port: ${SPRING_DATA_REDIS_PORT:6379}
    password: ${SPRING_DATA_REDIS_PASSWORD:}
  cache:
    type: redis

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
    gateway:
      access: unrestricted
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
    instances:
      coursesCircuitBreaker:
        baseConfig: default
      orderCircuitBreaker:
        baseConfig: default
      createCoursesCircuitBreaker:
        baseConfig: default
      createAuthorCircuitBreaker:
        baseConfig: default
      createOrderCircuitBreaker:
        baseConfig: default
      paymentCircuitBreaker:
        baseConfig: default

  timelimiter:
    instances:
      coursesCircuitBreaker:
        timeoutDuration: 5s
      orderCircuitBreaker:
        timeoutDuration: 5s
      createCoursesCircuitBreaker:
        timeoutDuration: 5s
      createAuthorCircuitBreaker:
        timeoutDuration: 5s
      createOrderCircuitBreaker:
        timeoutDuration: 5s
      paymentCircuitBreaker:
        timeoutDuration: 5s